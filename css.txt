/**************/
/*    Float   */
/**************/

/* свойства элемента */
float: left; 	- всплытие элемента и прижатие к левому краю родителя. Элемент выпал из потока и всплыл на уровень выше. 
					Все элементы и даже родитель считают, что элемента нет.
float: right; 	- всплытие элемента и прижатие к правому краю родителя.

/* Если двум эелементам добавить это свойство, то они оба всплывут и прижмуться к соответствующему краю родителя. 
Друг за другом или к разным краям (если лефт и райт). Если под этими элементами окажется текст, то
<p> - текст в параграфе выдавиться и будет обтекать эти элементы, хотя границы блока самого параграфа окажется под этими элементами. */

/* Схлопывание при всплытии   родительского контейнера. 
Если все элементы имеют флоат, то родительский контейнер схлопывается, т.е. его ширина и высота становяться равной 0.
И все остальные контейнеры могут подлазить под всплывшие элементы. Чтобы этого не происходило, нужно  применять 
clearfix (очистка потока).

clear: both; 	- это свойство запрещает этому блоку обтекать элементы с двух сторон и
									не дает поднырнуть под всплывшие элементы. */
									
owerflow: hidden; - свойство не позволяющее вываливаться из родительского контейнера. (т.н. клиаринг флоутов)
									
									

/*************/		
/*    Flex   */
/*************/

/* свойства родительского контейнера */

displey: flex; 					- устанавливаем свойство для родительского контейнера (блочный)
displey: inline-flex; 			- устанавливаем свойство для родительского контейнера (строчный) и к нему можно применить, например text-align: center;

 /* направление основной оси */
flex-direction: row;			- Горизонтальное. С лева на право. (по умолчанию)
				row-reverse;	- Горизонтальное. С права на лево.
				column;			- Вертикальное.   С верху вниз.
				column-reverse;	- Вертикальное.   С низу вверх.				

 /* распределение по оси */
justify-content: flex-start;	- прижатие к началу оси. (по умолчанию)
				 flex-end;		- прижатие к концу оси.
				 center;		- прижимаются к центру оси.
				 space-between; - распределятся по всей ширине. Первый и последний элемент прижаты к краю контейнера.
				 space-around;  - распределятся по всей ширине. Отступы между элементами складываются.
				 space-evenly;  - распределятся по всей ширине. Отступы между элементами не складываются.
				 
/* выравнивание всех элементов по неосновной оси */				 
align-items:	 flex-start;	- выравнивание по верхнему краю элементов. (по умолчанию)
				 flex-end;		- выравнивание по нижнему краю элементов.
				 center;		- выравнивание по центру.
				 baseline;		- выравнивание по верхнему краю элементов.
				 stretch;		- растягиваются на всю высоту контейнера.
				 
/* перенос по строкам */		
flex-wrap: 	nowrap;				- элементы не переносятся на новую ось. (по умолчанию)
			wrap;				- если кол-во элементов не вмещаются, то они переносятся на новую ось (ниже).
			wrap-reverse;		- если кол-во элементов не вмещаются, то они переносятся на новую ось. (выше).
			
/* выравнивание осей внутри контейнера (только при flex-wrap: wrap;)*/				 
align-content:	 flex-start;	- оси прижимаются к верхнему краю контейнера. (по умолчанию)
				 flex-end;		- оси прижимаются к нижнему краю контейнера.
				 center;		- оси прижимаются к центру.
				 stretch;		- оси распределились на всю высоту контейнера.
				 
column-gap: 20 px; 				- межколоночное расстояние
				 
/* свойства элеменов в родительском контейнере */	
flex: flex-grow flex-shrink	flex-basis - короткая запись сразу нескольких свойств элементов
flex: 1 1 auto;

/* порядок элементов */
order: 0;						- приоритет элемента (по умолчанию). 
order: 1 - 255;					- элементы выстраиваются в порядке приоритета.

/* размер элементов */
flex-basis: auto;				- элемент занимает размер по ширине равный размеру его контента 									
flex-basis: 30%;				- элемент занимает размер по ширине равный 30% контейнера									
flex-basis: 300px;				- элемент занимает размер по ширине равный 300px

/* жадность элементов */
flex-grow: 0;					- жадность элемента (по умолчанию). Элементы все не растянутые. 
									Элементу запрещено увеличиваться относительно заданного размера свойством flex-basis
flex-grow: 1 - 255;				- элемент с более высоким приоитетом растягивается и занимает 
									все оставшуюся пространство вдоль оси.

/* сужении элементов при уменьшение экрана относительно заданного базового размера, заданного свойством flex-basis*/
flex-shrink: 0;					- элементу запрещено сужаться относительно базового размера
flex-shrink: 1;					- элементу разрешено сужаться относительно базового размера(по умолчанию).				

/* выравнивание конкретного элементов по неосновной оси (позволяет перезаписать свойство align-items для контейнера)*/
align-self:		 flex-start;	- выравнивание по верхнему краю элементов. (по умолчанию)
				 flex-end;		- выравнивание по нижнему краю элементов.
				 center;		- выравнивание по центру.
				 baseline;		- выравнивание по верхнему краю элементов.
				 stretch;		- растягиваются на всю высоту контейнера.

width: 	50%;					- ширина элемена при 2-х колоночном варианте
		calc(50% - 10px);		- то же самое, но с учетом межколоночного расстояния
								  (работает только со justify-content: space-between;)
								  

